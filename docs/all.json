{"shell":true,"revision":"HEAD","objects":[{"type":null,"source":"lib/angle.ex:3","object_type":"ModuleObject","moduledoc":"Tired of forever converting back and forwards between degrees and radians?\nWell worry no more; Angle is here to make your life simple!\n\n## Magic sigils\n\nAngle defines the `~a` sigil so that you can create an Angle easily.\n\n### Examples\n\nCreating an Angle from decimal degrees:\n\n    iex> use Angle\n    ...> ~a(13.2)d\n    #Angle<13.2°>\n\nCreating an Angle from radians:\n\n    iex> use Angle\n    ...> ~a(0.25)r\n    #Angle<0.25㎭>\n\nCreating an Angle from gradians:\n\n    iex> use Angle\n    ...> ~a(40)g\n    #Angle<40ᵍ>\n\nCreate an Angle from degrees, minutes and seconds:\n\n    iex> use Angle\n    ...> ~a(90,30,50)dms\n    #Angle<90° 30′ 50″>\n\n## Lazy converstion\n\nMost functions in Angle return a potentially modified version of the angle,\nso that if the angle needs to be converted to radians or degrees for the\nunderlying function to work, then it'll only be done once.\n\n### Examples\n\nReturning the radian representation of an angle\n\n      iex> use Angle\n      ...> ~a(13)d\n      ...> |> Angle.to_radians()\n      ...> |> inspect()\n      \"{#Angle<13°>, 0.22689280275926282}\"\n","module":"Elixir.Angle","id":"Angle"},{"type":null,"source":"lib/angle/dms.ex:4","object_type":"ModuleObject","moduledoc":"Functions relating to dealing with angles in Degrees, Minutes and Seconds.\n","module":"Elixir.Angle.DMS","id":"Angle.DMS"},{"type":null,"source":"lib/angle/degree.ex:3","object_type":"ModuleObject","moduledoc":"Functions relating to dealing with angles in real Degrees.\n","module":"Elixir.Angle.Degree","id":"Angle.Degree"},{"type":null,"source":"lib/angle/gradian.ex:4","object_type":"ModuleObject","moduledoc":"Functions relating to dealing with angles in Gradians.\n","module":"Elixir.Angle.Gradian","id":"Angle.Gradian"},{"type":null,"source":"lib/angle/radian.ex:3","object_type":"ModuleObject","moduledoc":"Functions relating to dealing with angles in Radians.\n","module":"Elixir.Angle.Radian","id":"Angle.Radian"},{"type":null,"source":"lib/angle/sigil.ex:5","object_type":"ModuleObject","moduledoc":"This module defines the `~a` macros.  To use it just `use Angle`.\n","module":"Elixir.Angle.Sigil","id":"Angle.Sigil"},{"type":null,"source":"lib/angle/trig.ex:4","object_type":"ModuleObject","moduledoc":"Wraps Erlang's `:math` module to provide versions of it's trigonomic\nfunctions which work with the `Angle` type.\n\nErlang's `:math` module relies on your libc implementation.  Which return\npotentially different values for these functions based on the approximations\nthey use.  Specifally you may see small differences between values computed\nby macOS' libc and GNU libc.  This can lead to surprising test failures; you\nmost likely want to limit accuracy in tests to a few decimal places.\n","module":"Elixir.Angle.Trig","id":"Angle.Trig"},{"type":"impl","source":"lib/inspect/angle.ex:3","object_type":"ModuleObject","moduledoc":"Defines the inspect protocol for Angles so that they can look pretty.\n","module":"Elixir.Inspect.Angle","id":"Inspect.Angle"},{"type":"def","source":"lib/angle.ex:64","signature":[["n",[],null]],"object_type":"FunctionObject","name":"degrees","module_id":"Angle","id":"degrees/1","doc":"See `Angle.Degree.init/1`.","arity":1},{"type":"def","source":"lib/angle.ex:67","signature":[["d",[],null],["m",[],null],["s",[],null]],"object_type":"FunctionObject","name":"dms","module_id":"Angle","id":"dms/3","doc":"See `Angle.DMS.init/3`.","arity":3},{"type":"def","source":"lib/angle.ex:66","signature":[["n",[],null]],"object_type":"FunctionObject","name":"gradians","module_id":"Angle","id":"gradians/1","doc":"See `Angle.Gradian.init/1`.","arity":1},{"type":"def","source":"lib/angle.ex:65","signature":[["n",[],null]],"object_type":"FunctionObject","name":"radians","module_id":"Angle","id":"radians/1","doc":"See `Angle.Radian.init/1`.","arity":1},{"type":"def","source":"lib/angle.ex:81","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"to_degrees","module_id":"Angle","id":"to_degrees/1","doc":"See `Angle.Degree.to_degrees/1`.","arity":1},{"type":"def","source":"lib/angle.ex:83","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"to_dms","module_id":"Angle","id":"to_dms/1","doc":"See `Angle.DMS.to_dms/1`.","arity":1},{"type":"def","source":"lib/angle.ex:82","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"to_gradians","module_id":"Angle","id":"to_gradians/1","doc":"See `Angle.Gradian.to_gradians/1`.","arity":1},{"type":"def","source":"lib/angle.ex:80","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"to_radians","module_id":"Angle","id":"to_radians/1","doc":"See `Angle.Radian.to_radians/1`.","arity":1},{"type":"def","source":"lib/angle.ex:69","signature":[],"object_type":"FunctionObject","name":"zero","module_id":"Angle","id":"zero/0","doc":"Initialize and Angle with zero values\n\n## Examples\n\n      iex> Angle.zero()\n      #Angle<0>\n","arity":0},{"type":"def","source":"lib/angle/dms.ex:81","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"ensure","module_id":"Angle.DMS","id":"ensure/1","doc":"Ensure that a DMS representation is present for this angle, otherwise\ncalculate one.\n\n## Examples\n\n    iex> ~a(90.5)d\n    ...> |> ensure()\n    ...> |> Map.get(:dms)\n    {90, 30, 0.0}\n\n    iex> ~a(166.7662400)d\n    ...> |> ensure()\n    ...> |> Map.get(:dms)\n    {166, 45, 58.464000000037686}\n\n    iex> ~a(1.579522973054868)r\n    ...> |> ensure()\n    ...> |> Map.get(:dms)\n    {90, 30, 0.0}\n\n    iex> ~a(100.55555555555556)g\n    ...> |> ensure()\n    ...> |> Map.get(:dms)\n    {90, 30, 0.0}\n","arity":1},{"type":"def","source":"lib/angle/dms.ex:15","signature":[["d",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Angle.DMS","id":"init/1","doc":"Initialize an Angle from integer `d` degrees.\n\n## Examples\n\n    iex> init(13)\n    #Angle<13°>\n","arity":1},{"type":"def","source":"lib/angle/dms.ex:26","signature":[["d",[],null],["m",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Angle.DMS","id":"init/2","doc":"Initialize an Angle from integer `d` degrees, optionally followed by integer\n`m` minutes.\n\n## Examples\n\n    iex> init(13, 30)\n    #Angle<13° 30′>\n","arity":2},{"type":"def","source":"lib/angle/dms.ex:38","signature":[["d",[],null],["m",[],null],["s",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Angle.DMS","id":"init/3","doc":"Initialize an Angle from integer `d` degrees, followed by integer\n`m` minutes and `s` seconds.\n\n## Examples\n\n    iex> init(13, 30, 45)\n    #Angle<13° 30′ 45″>\n","arity":3},{"type":"def","source":"lib/angle/dms.ex:50","signature":[["value",[],null]],"object_type":"FunctionObject","name":"parse","module_id":"Angle.DMS","id":"parse/1","doc":"Attempt to parse a string of degrees, minutes and seconds.\n\n## Examples\n\n    iex> \"166 45 58.46\" |> parse() |> inspect()\n    \"{:ok, #Angle<166° 45′ 58.46″>}\"\n\n    iex> \"166,45,58.46\" |> parse() |> inspect()\n    \"{:ok, #Angle<166° 45′ 58.46″>}\"\n\n    iex> \"166° 45′ 58.46″\" |> parse() |> inspect()\n    \"{:ok, #Angle<166° 45′ 58.46″>}\"\n\n    iex> \"166°45′58.46″\" |> parse() |> inspect()\n    \"{:ok, #Angle<166° 45′ 58.46″>}\"\n","arity":1},{"type":"def","source":"lib/angle/dms.ex:126","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"to_dms","module_id":"Angle.DMS","id":"to_dms/1","doc":"Returns the DMS representation of the Angle.\n\n## Examples\n\n    iex> ~a(0.5)r\n    ...> |> to_dms()\n    ...> |> inspect()\n    \"{#Angle<28.64788975654116°>, {28, 38, 52.403123548181156}}\"\n","arity":1},{"type":"def","source":"lib/angle/degree.ex:52","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"ensure","module_id":"Angle.Degree","id":"ensure/1","doc":"Ensure that a degree representation is present for this angle, otherwise\ncalculate one.\n\n## Examples\n\n    iex> ~a(0.5)r\n    ...> |> ensure()\n    ...> |> Map.get(:d)\n    28.64788975654116\n\n    iex> ~a(76.3944)g\n    ...> |> ensure()\n    ...> |> Map.get(:d)\n    68.75496000000001\n\n    iex> ~a(77 50 56)dms\n    ...> |> ensure()\n    ...> |> Map.get(:d)\n    77.84888888888888\n","arity":1},{"type":"def","source":"lib/angle/degree.ex:7","signature":[["n",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Angle.Degree","id":"init/1","doc":"Initialize an Angle from a number `n` of degrees\n\n## Examples\n\n    iex> init(13)\n    #Angle<13°>\n\n    iex> init(13.2)\n    #Angle<13.2°>\n","arity":1},{"type":"def","source":"lib/angle/degree.ex:22","signature":[["value",[],null]],"object_type":"FunctionObject","name":"parse","module_id":"Angle.Degree","id":"parse/1","doc":"Attempt to parse decimal degrees.\n\n## Examples\n\n    iex> \"13\" |> parse() |> inspect()\n    \"{:ok, #Angle<13°>}\"\n\n    iex> \"13.2\" |> parse() |> inspect()\n    \"{:ok, #Angle<13.2°>}\"\n\n    iex> \"13°\" |> parse() |> inspect()\n    \"{:ok, #Angle<13°>}\"\n\n    iex> \"13.2°\" |> parse() |> inspect()\n    \"{:ok, #Angle<13.2°>}\"\n","arity":1},{"type":"def","source":"lib/angle/degree.ex:90","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"to_degrees","module_id":"Angle.Degree","id":"to_degrees/1","doc":"Return the degrees representation of the Angle.\n\n## Examples\n\n    iex> ~a(0.5)r\n    ...> |> to_degrees()\n    ...> |> inspect()\n    \"{#Angle<28.64788975654116°>, 28.64788975654116}\"\n","arity":1},{"type":"def","source":"lib/angle/gradian.ex:53","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"ensure","module_id":"Angle.Gradian","id":"ensure/1","doc":"Ensure that a gradian representation is present for this angle, otherwise\ncalculate one.\n\n## Examples\n\n    iex> ~a(90)d\n    ...> |> ensure()\n    ...> |> Map.get(:g)\n    100.0\n\n    iex> ~a(1)r\n    ...> |> ensure()\n    ...> |> Map.get(:g)\n    63.66197723675813\n\n    iex> ~a(90 0 0)dms\n    ...> |> ensure()\n    ...> |> Map.get(:g)\n    100.0\n","arity":1},{"type":"def","source":"lib/angle/gradian.ex:8","signature":[["n",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Angle.Gradian","id":"init/1","doc":"Initialize an Angle from a number `n` of gradians\n\n## Examples\n\n    iex> init(13)\n    #Angle<13ᵍ>\n\n    iex> init(13.2)\n    #Angle<13.2ᵍ>\n","arity":1},{"type":"def","source":"lib/angle/gradian.ex:23","signature":[["value",[],null]],"object_type":"FunctionObject","name":"parse","module_id":"Angle.Gradian","id":"parse/1","doc":"Attempt to arse decimal gradians.\n\n## Examples\n\n    iex> \"13\" |> parse() |> inspect()\n    \"{:ok, #Angle<13ᵍ>}\"\n\n    iex> \"13.2\" |> parse() |> inspect()\n    \"{:ok, #Angle<13.2ᵍ>}\"\n\n    iex> \"13ᵍ\" |> parse() |> inspect()\n    \"{:ok, #Angle<13ᵍ>}\"\n\n    iex> \"13.2ᵍ\" |> parse() |> inspect()\n    \"{:ok, #Angle<13.2ᵍ>}\"\n","arity":1},{"type":"def","source":"lib/angle/gradian.ex:93","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"to_gradians","module_id":"Angle.Gradian","id":"to_gradians/1","doc":"Return the gradians representation of the Angle.\n\n## Examples\n\n    iex> use Angle\n    ...> ~a(0.5)r\n    ...> |> to_gradians()\n    ...> |> inspect()\n    \"{#Angle<0.5㎭>, 31.830988618379067}\"\n","arity":1},{"type":"def","source":"lib/angle/radian.ex:52","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"ensure","module_id":"Angle.Radian","id":"ensure/1","doc":"Ensure that a radian representation is present for this angle, otherwise\ncalculate one.\n\n## Examples\n\n    iex> ~a(90)d\n    ...> |> ensure()\n    ...> |> Map.get(:r)\n    1.5707963267948966\n\n    iex> ~a(76.3944)g\n    ...> |> ensure()\n    ...> |> Map.get(:r)\n    1.2000004290770006\n\n    iex> ~a(90,0,0)dms\n    ...> |> ensure()\n    ...> |> Map.get(:r)\n    1.5707963267948966\n","arity":1},{"type":"def","source":"lib/angle/radian.ex:7","signature":[["n",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Angle.Radian","id":"init/1","doc":"Initialize an Angle from a number `n` of radians\n\n## Examples\n\n    iex> init(13)\n    #Angle<13㎭>\n\n    iex> init(13.2)\n    #Angle<13.2㎭>\n","arity":1},{"type":"def","source":"lib/angle/radian.ex:22","signature":[["value",[],null]],"object_type":"FunctionObject","name":"parse","module_id":"Angle.Radian","id":"parse/1","doc":"Attempt to arse decimal radians.\n\n## Examples\n\n    iex> \"13\" |> parse() |> inspect()\n    \"{:ok, #Angle<13㎭>}\"\n\n    iex> \"13.2\" |> parse() |> inspect()\n    \"{:ok, #Angle<13.2㎭>}\"\n\n    iex> \"13㎭\" |> parse() |> inspect()\n    \"{:ok, #Angle<13㎭>}\"\n\n    iex> \"13.2㎭\" |> parse() |> inspect()\n    \"{:ok, #Angle<13.2㎭>}\"\n","arity":1},{"type":"def","source":"lib/angle/radian.ex:92","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"to_radians","module_id":"Angle.Radian","id":"to_radians/1","doc":"Return the radians representation of the Angle.\n\n## Examples\n\n    iex> use Angle\n    ...> ~a(90)d\n    ...> |> Angle.Radian.to_radians()\n    ...> |> inspect()\n    \"{#Angle<90°>, 1.5707963267948966}\"\n","arity":1},{"type":"def","source":"lib/angle/sigil.ex:9","signature":[["value",[],null],["arg2",[],"Elixir"]],"object_type":"FunctionObject","name":"sigil_a","module_id":"Angle.Sigil","id":"sigil_a/2","doc":"Defines a `~a` shortcut for inputting angles.\n\n## Examples\n\nCreating an Angle from degrees:\n\n    iex> use Angle\n    ...> ~a(13.2)d\n    #Angle<13.2°>\n\n    iex> use Angle\n    ...> ~a(13)d\n    #Angle<13°>\n\nCreating an Angle from radians:\n\n    iex> use Angle\n    ...> ~a(0.25)r\n    #Angle<0.25㎭>\n\n    iex> use Angle\n    ...> ~a(13)r\n    #Angle<13㎭>\n\nAn angle of zero is the same in both degrees and radians do doesn't need a modifier\n\n    iex> use Angle\n    ...> ~a(0)\n    #Angle<0>\n","arity":2},{"type":"def","source":"lib/angle/trig.ex:15","signature":[["x",[],null]],"object_type":"FunctionObject","name":"acos","module_id":"Angle.Trig","id":"acos/1","doc":"Calculate the inverse trigonometric cosine (also known as arccosine) angle\nof a real value `x` between -1 and 1.\n\n## Examples:\n\n    iex> Angle.Trig.acos(1)\n    ...> |> inspect()\n    \"{:ok, #Angle<0.0㎭>}\"\n\n    iex> Angle.Trig.acos(-1)\n    ...> |> inspect()\n    \"{:ok, #Angle<3.141592653589793㎭>}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:33","signature":[["x",[],null]],"object_type":"FunctionObject","name":"acosh","module_id":"Angle.Trig","id":"acosh/1","doc":"Calculate the inverse hyperbolic cosine angle of a real value `x` between 1\nand +∞.\n\n## Examples\n\n    iex> Angle.Trig.acosh(1)\n    ...> |> inspect()\n    \"{:ok, #Angle<0.0㎭>}\"\n\n    iex> Angle.Trig.acosh(2)\n    ...> |> inspect()\n    \"{:ok, #Angle<1.3169578969248166㎭>}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:51","signature":[["x",[],null]],"object_type":"FunctionObject","name":"asin","module_id":"Angle.Trig","id":"asin/1","doc":"Calculate the inverse trigonometric sine (also known as arcsine) angle of a\nreal value `x` between -1 and 1.\n\n## Examples\n\n    iex> Angle.Trig.asin(0)\n    ...> |> inspect()\n    \"{:ok, #Angle<0.0㎭>}\"\n\n    iex> Angle.Trig.asin(1)\n    ...> |> inspect()\n    \"{:ok, #Angle<1.5707963267948966㎭>}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:69","signature":[["x",[],null]],"object_type":"FunctionObject","name":"asinh","module_id":"Angle.Trig","id":"asinh/1","doc":"Calculate the inverse hyperbolic sine angle of a real value `x`.\n\n## Examples\n\n    iex> Angle.Trig.asinh(-1)\n    ...> |> inspect()\n    \"{:ok, #Angle<-0.881373587019543㎭>}\"\n\n    iex> Angle.Trig.asinh(1)\n    ...> |> inspect()\n    \"{:ok, #Angle<0.881373587019543㎭>}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:86","signature":[["x",[],null]],"object_type":"FunctionObject","name":"atan","module_id":"Angle.Trig","id":"atan/1","doc":"Calculate the inverse trigonometric tangent (also known as arctangent) angle\nof any real value `x`.\n\n## Examples\n\n    iex> Angle.Trig.atan(-1)\n    ...> |> inspect()\n    \"{:ok, #Angle<-0.7853981633974483㎭>}\"\n\n    iex> Angle.Trig.atan(1)\n    ...> |> inspect()\n    \"{:ok, #Angle<0.7853981633974483㎭>}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:104","signature":[["x",[],null],["y",[],null]],"object_type":"FunctionObject","name":"atan2","module_id":"Angle.Trig","id":"atan2/2","doc":"Calculate the inverse trigonometric tangent (also known as arctangent) angle\nbetween the positive x-axis and the coordinates `x`, `y`.\n\n## Examples\n\n    iex> Angle.Trig.atan2(-1, -2)\n    ...> |> inspect()\n    \"{:ok, #Angle<-2.677945044588987㎭>}\"\n\n    iex> Angle.Trig.atan2(1, 2)\n    ...> |> inspect()\n    \"{:ok, #Angle<0.4636476090008061㎭>}\"\n","arity":2},{"type":"def","source":"lib/angle/trig.ex:122","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"cos","module_id":"Angle.Trig","id":"cos/1","doc":"Calculate the cosine (sine complement) of `angle`.\n\nThe cosine is the ratio of the length of the adjacent side to the length of\nthe hypotenuse of a right angle triangle.\n\nReturns a `float` between `-1.0` and `1.0`\n\n## Example\n\n    iex> ~a(180)d\n    ...> |> cos()\n    ...> |> inspect()\n    \"{#Angle<180°>, -1.0}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:141","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"cosh","module_id":"Angle.Trig","id":"cosh/1","doc":"Calculate the hyperbolic cosine of `angle`.\n\nReturns a `float` between `1.0` and +∞.\n\n## Example\n\n    iex> ~a(0)\n    ...> |> cosh()\n    ...> |> inspect()\n    \"{#Angle<0>, 1.0}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:157","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"sin","module_id":"Angle.Trig","id":"sin/1","doc":"Calculate the sine of `angle`.\n\nThe sine of an angle is the ratio of the length of the opposite side to the\nlength of the hypotenuse of a right angle triangle.\n\nReturns a `float` between -∞ and +∞.\n\n## Example\n\n    iex> ~a(90)d\n    ...> |> sin()\n    ...> |> inspect()\n    \"{#Angle<90°>, 1.0}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:176","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"sinh","module_id":"Angle.Trig","id":"sinh/1","doc":"Calculate the hyperbolic sine of `angle`.\n\nReturns a `float` between -∞ and +∞.\n\n## Example\n\n    iex> ~a(0)\n    ...> |> sinh()\n    ...> |> inspect()\n    \"{#Angle<0>, 0.0}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:192","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"tan","module_id":"Angle.Trig","id":"tan/1","doc":"Caculate the tangent of `angle`.\n\nThe tangent of an angle is the ratio of the length of the opposite side to\nthe length of the adjacent side of a right angle triangle.\n\nReturns a `float` between -∞ and +∞.\n\n## Example\n\n    iex> ~a(0)\n    ...> |> tan()\n    ...> |> inspect()\n    \"{#Angle<0>, 0.0}\"\n","arity":1},{"type":"def","source":"lib/angle/trig.ex:211","signature":[["angle",[],null]],"object_type":"FunctionObject","name":"tanh","module_id":"Angle.Trig","id":"tanh/1","doc":"Calculate the hyperbolic tangent of `angle`.\n\nReturns a `float` between `-1.0` and `1.0`\n\n## Example\n\n    iex> ~a(0)\n    ...> |> tanh()\n    ...> |> inspect()\n    \"{#Angle<0>, 0.0}\"\n","arity":1},{"type":"def","source":"lib/inspect/angle.ex:1","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Inspect.Angle","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/inspect/angle.ex:13","signature":[["angle",[],"Elixir"],["opts",[],null]],"object_type":"FunctionObject","name":"inspect","module_id":"Inspect.Angle","id":"inspect/2","doc":false,"arity":2}],"language":"elixir","git_repo_url":"origin","client_version":"0.5.6","client_name":"inch_ex","branch_name":"HEAD","args":[]}